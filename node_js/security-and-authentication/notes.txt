[ 24/09/2022 23:11 Day 01]

~ Node Security & Authentication

-- 1. Security & Authentication Overview (5m)

  + Social Sign-On (Octa, Oauth Zero, Amazon's Cognito, or Social Sign-on directly)
  + Google OAuth

  + In real world you'll never be implementing authentication from scratch, you'll be opening yourself for vulnerabilities and bugs that can be exploited easily. 

  + In real world projects, we use off-the-shelf authentication

  + All of the approaches have one thing in common, that they follow a standard which is known as Oauth 2.0.

  + Oauth 2.0 is the most widely used way of login on internet

  + The Goal of this section to teach real world authentication techniques, not toy techniques.

  [ The Principle of Least Privilege ] ? taught with CORS

-- 2. Encrypted Connections w/ SSL and TLS (6m)

  - HTTPS with SSL/TLS
    + Makesure to use only "HTTPS" while sharing data between the client (browser) and the server. 
    + Data shared using the HTTPS is encrypted
    + HTTPS prevents other users from eavesdropping on the data and from temparing (modifying) it.

  - How does it happen using the SLL/TLS protocol?
      
  + When we share our data on a unsecured site (i.e. not using https) our data is not encrypted. 

  + Other users connected on the same wifi can analyze the packets using packet analysis tools such as "Wireshark" 

  + HTTPS, under the hood uses powerful encryption of SSL & TLS

  - SSL & TLS
    + SSL --> Secure Socket Layer
    + TLS --> Transport Layer Security
    + SSL and TLS are basically same things.
    + TLS is the successer of the SSL protocol.
    + SSL is old one, and the TLS is the new one.

    - Versioning:
      SSL1.0, SSL2.0, SSL3.0, TLS1.0, ....

    + HTTPS still uses HTTP, but wraps it using the TLS protocal 

    + i.e TLS + HTTP --> HTTPS

    + Newer and secured versions of TLS keeps on comming

    - What are the properties that are encrypted in HTTPS, and which are visible in the form of plain text?
      + Host name, and the PORT number is not encrypted.
      + Body of the data where the main data is encrypted.

    + In other words, when you're communicating using the HTTPS protocol, other users may know to which host your communicating to, but what you're communicating will be secured. 

    + For example, you're searching something on google, hackers will know that you're using google, but what you're searching on it wont be exposed using HTTPS & TLS.

-- 3. Digital Certificates, Signing, and Man In The Middle Attacks (6m)

  + For our data to be encrypted, we need SSL/TLS Certificates 

  - What are Digital Certificates?
    + Used to verify the server's ownership prior to sending encrypted data.

  + If the digital signature of the certificate is valid, and we trust the person who issued these certificates, then only you say I'm willing to use the key to send data, back and forth with the server.

  + It's not enough if the data is encrypted, if we are sending the data to some malicious hacker.

  - What are Man In The Middle Attacks?
    + Hackers pretend to be the server, and receives the encrypted data

  - How digital certificates prevent man in the middle attacks?
    + They verifies the owner first (server), if the owner's identity is verified, then only the encrypted data is shared.

  - By whom these certificates are signed by?
    + They are signed by a "Certificate Authority"
    + A trusted organization that issues digital certificates

  - Who provides signed SSL Certificates for free?
    + Let's Encrypt
    + They are back by Google, Facebook, and big companies

  - What are some conditions of Let's Encrypt?
    + Site must have domain name.
    + It can't be just IP Address on some server somewhere

  - What are Self-Signed Certificate?
    + Enable HTTPS but not trusted by others
    + We sign it by ourselves on our local machines
    + Useful for development

  + We dont have reputation like large CA Authorities, that's why self-signed certificates are not used in the production.

  + Browser will provide with you with a warning if you visit a site having self-signed certificates.

  - What are CA-Signed Certificate and why do we wanna use them instead of the self-signed one in production?
    + Trusted by most clients on the web.
    + Useful for production.

  - All TLS (digital) Certificates can be broken down into two following categories:
    + Self-Signed Certificate
    + CA-Signed Certificate

   + TLS protocal --> Encrypts the traffic
   + TLS certificates --> Verifies the ownership of the server you're talking to.

-- 4. Setting Up Our Securtiy Example (4m)

  + path module makes sure that the path to our file directory is valid in all operating systems

  + By default, express server serves using the HTTP protocol, where data is not encrypted.

  + Anyone on our network, listening to the traffic can see the data

  + Let's make it difficult for nosy hackers and other software that are listening to our data we're sending back and forth.

-- 5. HTTPS w/ Node, Self Signed Certificates, and Public Key Cryptography (16m)

  - What are the ways using which we can use HTTPS in Node Servers?
    + Google Cloud
    + Amazon AWS
    + Amazon CloudFont --> Served using CDN --> Pages will be served from the closest location, in the fastest way possible!

  + We use HTTPS in local servers because to makesure our server communicate the sensitive information correctly using the HTTPS protocol, otherwise our testing would remain only limited on the HTTP protocol.

  - In how many ways we can start our HTTP server?
    1) Listen() function from express app module
      >> app.listen(PORT, ...);

    2) or, Node's built-in http module
      >> http.createServer().listen(PORT, ...);

  + Sometimes, we used to the 2nd option. 

  - Because, if we can create a server using http module, then we can also create a node server using "https" module:
    >> https.createServer().listen(PORT, ...);

  - Note: When use https module to create a server, we can pass an object to configure it:
    >> https.createServer({
          key: '',
          cert: ''
        }).listen(PORT, ...);

  + In the https createServer's option object we can define SSL Certificate information.

  - From where we will get the SSL Certificate details to use it in our server?
    + We will use "OpenSSL" to create that certificate

  - What is OpenSSL?
    + Open source organization that provides certificates 
  
  - How we can generate a self-signed certificate using OpenSSL?
    >> openssl req -x509 -newkey rsa:4096 -nodes -keyout key.pem -out cert.pem -days 365

    + openssl --> main command
    + req --> to generate a new certificate
    + -x509 --> tells this is self-signed certificate
    + rsa:4096 --> using rsa encryption of key size of 4096 bites
    + -node --> we dont want any password to access
    + -keyout key.pem --> key output, .pem is common format to store certificate related data
    + -out cert.pem --> certificate output 
    + -days 365 --> it will be valid for 365 days [default is 30 days]

  + We only have to generate the certificate once per project, or once per year :)

  + We dont have to memorise the command, this command is one google search away.

  + For self-signed certificates, specifying the common name is not necessary because we will run the server locally and we dont have the domain name.

  + key.pem ensures we're the only one encrypting the data on this server. We have the ownership of the key

  + cert.pem allows to decrypt the data, encrypted by the above key -- browser will do it.

  + Browser requries access to that public certificate

  + This approach is known as "Public Key Cryptography"

  + Now, write the corresponding files names in the https' createServer object.

  - Note: We need import fs module, and use the readFileSync() function to load the files before using them, 
    { key: fs.readFileSync('key.pem') }

  - We also have to pass the express app's object as a second arguement to the https.createServer to makesure our server is working correctly

[ 25/09/2022 17:45 Day 02]

-- 6. Helmet.js (10m)

  - What is Helmet?
    + Helmet JS is a collection of middlewares 
  
  + We use all the security related middlewares at the top 

  + When we use helmet(), it includes 15 smaller security middlewares in our project.

  - Helmet set some default headers to the html requests and responses
    - For example:
      content-security-policy
      X-XSS-Protection
      Referrer-Policy
      X-Permitted-Cross-Domain-Policies, and so on. 

  + When we dont use helmet, header exposes the name of the server we're using for example express. 

  + We dont want others to know what type of server we're using to avoid them from exploiting any potential bugs on our website

  + Helmet js helps to solve this issue, by hiding the server implementation details

  + We can pass an options object to the helmet middleware if we wanna enable or disable some middlewares

  + Andre uses helmet in all of its project

-- 7. Authentication vs Authorization (7m)

  + We want users to login when we want some part of our websites to be protected

  + So, not all users can view everything in our application

  - For example:
    + We want our users' data to be secured
    + We dont want everyone to manipulate the content of our application

  - When it comes to login, there are two most important terms that are used.
    + Authentication
    + Authorization

  - What is meant by authentication?
    + It verifies users really are who claimed they to be
    + It verifies in the form of username and password

  - What is meany by authorization?
    + It verifies if user has permission to access some resource after being authenticated
    + It determines which resources can be accessed by users and which are not

  - When we dont have authentication & authorization:
    + Users can access our website anonymously
    + And, they can access whatever the data they want

  - When we have authentication and authorization:

    1) Authentication step:
      + This is the first stop they face when they access our website
      + They need to prove their identity
      + If its me, I need to prove that I'm Abeer

      - Ways of authentication:
        + Login using password
        + Login using biometrics (fingerprint)
        + Login using two-factor

    2) Authorization step:
      + Authenticated users can access their data
      + But, when they ought they access someone else' data, server will restrict them.

      + Authorization is sometimes called Access Control
      + It checks what you have permission to do


  + These two concepts of authentication & authorization known as "Auth", because both prefixes with it. 

  - We have following status codes for it:
    + 401 --> Unauthorized --> Client must authenticate itself to access it

    + 403 --> Forbidden --> Client is authenticated but does not have the rights to access it

-- 8. Social Sign In (5m)

  - What is social sign-in or social login?
    + When you choose to login on a website, and they provide you with different options to login.

  - They provide you with different social providers to login using:
    + Google
    + Facebook
    + Apple
    + Twitter
    + Github, etc

  + You might already have an account on these sites 

  + You dont need to rememeber any specific credentials for that site

  + Certain information on this site will be pre-populated using your other socila profile that you choose to sign-in using

  + Using this, signing into any site securely will be a matter of one or two clicks, and you dont need to remember anything 

  + This is social sign-in

  - When we add social sign-in to our website, we want:
    + We want things to be convinient for the user
    + We trust Google to keep our users passwords secure than we would ourselves

  + Any experienced developer will agree that big giants like google and facebook can keep our passwords protected more than a small group of developers implementing authentication and authorization from scratch.

-- 9. API Keys (11m)

  - There are three main tools that developers use to makesure only authorized users can access a server and it's APIs:
    1) API Keys
    2) OAuth Tokens
    3) JSON Web Token (JWT)

  - What is a API key?
    + An API key is a string value
    + It identifies your project using a simple API key to check quota and access

  - We use API keys for two purposes?
    1) A Unique Identifier for the Project
      + So, server will know from which application the request has come from

    2) Grant/Restrcit Acces to some APIs
      + When users of your API are developers, that are trying to enable some functionality in their application
      + That make use of your features that you have already expose

  + Sometimes, these API keys are often public. When the provider wants to know from which applications are using it

  + But, usually we wanna make them private.

  + We have to makesure they are only available in the server side, not on the front end

  + API keys --> Servre side, to makesure its not abused

  + We pass API key either in the query string, or in the header of the HTTP request

  + The provider of the API restrict calls per API KEY by using the 429 status code. 

  + Status Code 429 --> Too Many Request --> Rate Limiting

  + We use "rate limiting" when our API is public and accessible by everyone, so server wont become unavailable to other users 

  + API keys are great to makesure your API is used appropriately by some application

-- 10. JWT Tokens (15m)

  + JWT are a type of access tokens

  - What are access tokens?
    + They are very much like api key
    + They identify specific user of a application
    + They act as credential for a user to grant access to an API

  + Each JWT contains encoded JSON Object

  - How does JWT token work?
    + Whenever a user is logged in using his/her username and password, an authorized token is returned to him.
    + Now, whenever he uses some API, the token is automatically included in the query string.

  - Why do we use JWT tokens?
    + Using it, the user dont have to log-in again and again to prove his/her identity.
    + The token verifies the user identity
    + The JWT token also signifies what permission does the user has
    + It stores the access control of the user

  + JWTs are signed, the sender is ownership is identified

  + API key --> application level
  + JWT --> user level

  - What information does the JWT contain?
    + HEADER --> Algorithm & Token type 
    + PAYLOAD --> DATA
    + VERIFY SIGNATURE

[ 29/09/2022 17:00 Day 03 ]

-- 11. The OAuth Standard (215)

  - What is OAuth?
    + One of the widely used approaches in implementing login 
    + Used by Google, Facebook, GitHub, etc

    + It's an authentication standard that made social sign-in widespread

  + OAuth 2.0 defines the flow or process that goes on behind the scenes when you log on sites like Google 

  + This flow is not the simplest for developers 

  - Why do we need this complexity?
    + The problem that OAuth tries to solve, that letting user sign-in to sites without using their password 
    + It let users log-in to unknown, untrusted sites without entering their passwords

  - What is the OAuth Server?
    + Service you're using to sign-in
    + For example, google, github, twitter etc
    + They have their oauth servers where you put your credentials 

  + Google use oauth internally for all of it's services like youtube, google, gmail, etc. You will encounter the same sign in page

  + This make google secure this one server really really well

  + And, reduce the attack surface for the attackers

  + Added Bonus: Google can keep all of your accounts at one place 

  + We can also remove apps that have access to our google accounts. We can revoke consent

-- 12. OAuth 2.0 Authorization Code Flow (216)

  - What are the differnt roles/things invloved in the auth 2.0 flow?
    1) Resource Owner
    2) Client
    3) Resource Server
    4) Authorization Server

  + Resource Owner: When you log-in to medium as a user, you're the resouce owner.
  
  + And, as a user, you're using your browser, as a user agent to talk to the client.

  + Client: Web Application that tries to access to protected data for user, for you.

  + And, protect data, recides behind some resource server

  + Resource Server: Where your data recides 

  + Authorization Server: Authenticates the user identiy, and give access to the resource server

  + OAuth 2.0 has different types of flows

  + Where's the "Authorization Code Flow" is the most common and the gold standard when it comes to security.

  + Use "Authorization Code Flow" when you have a frontend, and as well as a backend, where you can securely store some secret

  + Therefore, we will be looking at the standard authorization code flow

  + This is a redirect-based flow

  - The Authorization code flow:
    1) Client (Web App) makes a get request to the Authorization Server (Google)

    2) It will redirect you to the authentication prompt, where you will enter your user & password, and consent the web-app to use your data

    3) If you logged-in successfully, the authentication server will return a short-lived "authorization code" to the client

    4) The Client returns the authorization code + client secret to /token

    5) Authorization Server returns the access token to the client 

    6) Then, finally the user can make the request with the access token, which is ususally a standard JSON web token

  + The idea of barrier tokens is the part of OAuth 2.0 standard, and was widely adopt by companies like Google

  + The OAuth standard doesnt restrict you to the type of token

  + We use this so the user never send their password directly to the resouce server 
  
-- 13. OAuth In Action with Single Sign On (217)

  + Callback URI --> It's the page where user will be redirected to after the sign-in was successful

  + OpenId --> Build on top off Oauth 2.0

  + By singing in using google, you automatically sign in to youtube, etc. 

  + The google authorization server set cookies for other google sites as well, so, you dont have to enter your credentials again and again

  + This is known as "Single Sign-In"

  + Sometimes the access token is stored in the browser's local storage or the cookies or sometimes it will be stored in the server as user session

  + As you get used to implementing these flows in your website, then you'll get comfortable with the steps involved

-- 14. Registering with the Google Authorization Server (218)

  + Now, we will implement Oauth in our server

  - First Step:
    + Registering your website (client) with the authorization server

  + In this lecture, we'll register our node application with the google authorization server, so we can use google's social sign-in

  - Steps of registeration
    1) Find your way to google developers cloud
    2) Create a new project
    3) Go to credentials 
    4) Create credentials --> OAuth client ID
    5) Configure the Consent Screen
    6) Select user type to be external & click on create
    7) Fill up the information on the consent screen
    8) Save & Continue
    9) Create Oauth Client ID
    10a) Add URI --> https://localhost:3000
    10b) Add Authorised redirects URIs --> https://localhost:3000/auth/google/callback

  + OAuth Client ID --> Uniquely identifies our application to Google
  + Consent Screen --> What information need from user

  + If we wanna make our application public, we will always select the "External" user type 

  + Scopes give us access to the specific user data that just logged in 

  + To pre-populate user's profile, we need to configure ahead of time in the scope what data to include in the consent

  + We can add test users untill the status of our application is testing 

  + We can push our application to production so any user with a google account can log into our application

  + We need to define "https://localhost:3000/auth/google/callback" this endpoint in our node application for handling redirection callback from authorization server (or google auth server to be specific)

  + If the all the steps were successful, we will receive client id and client secret

  + This secrect makes sure, your website, with this secret, will be grant authorization

  + We have to makesure this value has kept secure

  + Client ID: 
  + Client Secret: 

[ 30/09/2022 16:30 Day 04 ]

-- 15. Authentication Endpoints with Middleware (219)

  + 

4th Day - Friday - 219 - 226

5th Day - Sunday - 227 - 236 

  



    




  

    



