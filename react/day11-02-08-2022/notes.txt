[ 02/08/2022 20:50 ]

~ Section 10: The World of React Events

- Goals for this section:
    1) Attach event handlers to components in React
    2) Use method binding to preserve the this context with event handlers
    3) Pass event handlers down as props to child components
    4) Understand the "key" prop

- Event Attributes: Any event you can listen for in JS, you can listen for in React
    - Examples:
        + Mouse events: onClick, onMouseOver, onMouseEnter, onMouseLeaveetc
        + Form events: onSubmit, etc
        + Keyboard events: onKeyDown, onKeyUp, onKeyPress

- Pattern for attaching an event handlers
    + Event Attribute = { Callback function to execute }

- React made a wrapper for all of the vanilla js events

-- Method Binding

- You will lose the "this" context when you pass a function as a handler
    + "this" is undefined without binding methods

-- Fixing our binding

- There are three ways to bind methods (more than three)
    1) Use "bind" inline
    2) Use an arrow function
    3) Method bind in the constructor [ we've been doing this so far ]

1) Use "bind" inline:
    + Example:
        onClick = { this.handleClick.bind(this) }

    - Pros:
        + Very explicit (intuitive)

    - Cons:
        + What if you need to pass the same method for multiple components? Repitition and code clutter
        + New function created on every render i.e. in the end affecting the performance of your application

2) Use an arrow function:
    + Example:
        onClick = { () => this.handleClick() }

    - Pros:
        + No mention of bind!

    - Cons:
        + Intent is less clear (less intuitive - whatya doin?)
        + What if you need to pass the same method for multiple components? Repitition and code clutter
        + New function created on every render i.e. in the end affecting the performance of your application

3) In the constructor:
    + Example:
        this.handleClick = this.handleClick.bind(this);

    - Pros:
        + Only need to bind once!
        + More performant!

    - Cons:
        + Clunky code

4) Binding with Class Property [ Experimenting Method ]:
    + Relying on Babel to take care of it!
    + Example:
        handleClick = () => { ... }

-- Method binding with Arguements

- Because, later on we will be passing methods as props, and we'll need keys inside them to identify from which 
instance of component it was called from

[ Inaffective ways ]
- Arguements Binding with Methods in a loop:
    1) onClick = { this.handleClick.bind(this, arg) }
    2) onClick = { () => this.handleClick(arg) }

